%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Idris
file_extensions:
  - idr
scope: source.idris

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: \b(do|if|then|else|case|in)\b
      scope: keyword.control.idris
    - match: \b(infix[lr]?|let|where|of|with)\b
      scope: keyword.other.idris

  numbers:
    - match: \b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b
      scope: constant.numeric.idris
    - match: \b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b
      scope: constant.numeric.float.idris

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.idris
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.idris
        - match: \\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&])
          scope: constant.character.escape.ascii.idris
        - match: \\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+
          scope: constant.character.escape.octal.idris
        - match: \^[A-Z@\[\]\\\^_]
          scope: constant.character.escape.control.idris
        - match: '"'
          scope: punctuation.definition.string.end.idris
          pop: true
    - match: (?<!\w)\'
      scope: constant.character.escape.control.idris
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.idris
        - match: \\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&])
          scope: constant.character.escape.ascii.idris
        - match: \\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+
          scope: constant.character.escape.octal.idris
        - match: \^[A-Z@\[\]\\\^_]
          scope: constant.character.escape.control.idris
        - match: \n
          scope: invalid.illegal.idris
        - match: \'
          scope: punctuation.definition.string.end.idris
          pop: true

  comments:
    - match: '--'
      scope: punctuation.definition.comment.idris
      push:
        - meta_scope: comment.line.double-dash.idris
        - match: $\n?
          pop: true
